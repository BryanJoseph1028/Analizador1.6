/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.TextArea;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author HP
 */
public class FrmPrincipal extends javax.swing.JFrame {

       JFileChooser chooser = new JFileChooser();
        Reader lector;
    private Object jTable1;
    String A = new String();
    

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        btnTabla = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 51, 255));

        btnAnalizar.setBackground(new java.awt.Color(51, 153, 255));
        btnAnalizar.setText("ANALIZAR");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        btnTabla.setBackground(new java.awt.Color(51, 153, 255));
        btnTabla.setText("TABLA DE SIMBOLOS");
        btnTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablaActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "IDENTIFICADOR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(143, 143, 143)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
    int cont = 1;
        //JFileChooser 
    chooser = new JFileChooser();
    chooser.showOpenDialog(null);
    
    try {
         lector = new BufferedReader(new FileReader(chooser.getSelectedFile()));
          Lexer lexer = new Lexer(lector);
          
         String resultado = "LINEA" + cont + "\n";
         
        while (true){
            Tokens tokens = lexer.yylex();
            
            if (tokens ==null){
            resultado += "FIN";
            txtResultado.setText(resultado);
            return;
            }
            
            JOptionPane.showMessageDialog(null, lexer.lexeme);
            
            switch (tokens){
                case Linea:
                    cont++;
                    resultado += "LINEA" + cont + "\n";
                    break;
                    
                case ERROR:
                    resultado += "simbolo no definido\n";
                   // A.setText(" " + lexer.lexeme + " ");             
                    break;
                    
                case Identificador:  
                    resultado += lexer.lexeme + ": es un " + tokens + "\n";
                    A += lexer.lexeme + "\n";
                    break;
                    
                case Numero: 
                    resultado += lexer.lexeme + ": es un " + tokens + "\n";
                    A = A + lexer.lexeme + "\n";
                    break;
                    
                    case Reservada:
                    resultado += lexer.lexeme + ": es un " + tokens + "\n";
                                   A += lexer.lexeme + "\n";

                    break;
                case MayorIgual: case MenorIgual: case MayorQue: case MenorQue: case Comparador:
                    resultado += lexer.lexeme + ": es un " + tokens + "\n";
                               A += lexer.lexeme + "\n";

                    break;
                    
                case Parentesis_abren: case Parentesis_cierran: case Coma: case PuntoComa: 
                    resultado += lexer.lexeme + ": es un " + tokens + "\n";
                         A += lexer.lexeme + "\n";
      
                    break;
                
                default:
                    resultado += "Token: " + tokens + "\n";
                    break;
            }
              
        }
        
    
    
    }   catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }








        
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTablaActionPerformed
    // JFileChooser chooser = new JFileChooser();
     // chooser.showOpenDialog(null);
            // TODO add your handling code here:
        /////////////////////////// generacion de tabla/////////////////////////////
        HashMap <String,Integer> r = new HashMap<>();
        HashMap <String,Integer> op = new HashMap<>();
        HashMap <String,Integer> id = new HashMap<>();
        HashMap <String,Integer> deli = new HashMap<>();
        HashMap <String,Integer> num = new HashMap<>();
        HashMap <String,Integer> simbol = new HashMap<>();
        HashMap <String,Integer> Igualque = new HashMap<>();
        LinkedList <String> texto = new LinkedList<>();

Igualque.put("==",1);

r.put("abstract", 0);
r.put("assert", 0);
r.put("boolean", 0);
r.put("break", 0);
r.put("byte", 0);
r.put("default", 0);
r.put("import", 0);
r.put("short", 0);
r.put("volatile", 0);
r.put("static", 0);
r.put("while", 0);
r.put("strictfp", 0);
r.put("main", 0);
r.put("double", 0);
r.put("do", 0);
r.put("instanceof", 0);
r.put("else", 0);
r.put("int", 0);
r.put("interface", 0);
r.put("super", 0);
r.put("enum", 0);
r.put("long", 0);
r.put("switch", 0);
r.put("extends", 0);
r.put("final", 0);
r.put("native", 0);
r.put("new", 0);
r.put("synchronized", 0);
r.put("this", 0);
r.put("finally", 0);
r.put("case", 0);
r.put("catch", 0);
r.put("float", 0);
r.put("package", 0);
r.put("throw", 0);
r.put("private", 0);
r.put("for", 0);
r.put("throws", 0);
r.put("transient", 0);
r.put("protected", 0);
r.put("char", 0);
r.put("goto", 0);
r.put("public", 0);
r.put("try", 0);
r.put("class", 0);
r.put("const", 0);
r.put("continue", 0);
r.put("if", 0);
r.put("implements", 0);
r.put("return", 0);
r.put("void", 0);
r.put("string", 0);
//r.put("==", 0);
        
        op.put("/", 0);
        op.put("*", 0);
        op.put("+", 0);
        op.put("-", 0);
        op.put("=", 0);
        op.put("^", 0);
        op.put("<", 0);
        op.put(">", 0);
        op.put("||", 0);
        op.put("&&", 0);
      //  op.put("==", 0);
        
        //deli.put("#", 0);
        deli.put(";", 0);
        deli.put("{", 0);
        deli.put("}", 0);
        deli.put(")", 0);
        deli.put(",", 0);
        deli.put("(", 0);
        deli.put("\"", 0);
        
        simbol.put("@", 0);
        simbol.put("$", 0);
        simbol.put("&", 0);
        simbol.put("!", 0);
        simbol.put("?", 0);
        simbol.put("¡", 0);
        simbol.put("¿", 0);
        simbol.put("#", 0);
        
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Token","Cantidad","Tipo"});
        
               

        StringTokenizer st = new StringTokenizer(A,"@#$&!?¡¿{}();,\"+-*/><||&&#¡= \n\t",true);
     
        String token, text = "";
        while (st.hasMoreTokens()){
            token = st.nextToken();
            if(!" ".equals(token) && !"\n".equals(token) && !"\t".equals(token)){
                
                if (r.containsKey(token)) {
                    r.put(token, r.get(token)+1);            
                }
                else{
                if (simbol.containsKey(token)) {
                        simbol.put(token, simbol.get(token)+1);            
                    }
                
                 
                
                else{
                    if (Igualque.containsKey(token)) {
                        Igualque.put(token, Igualque.get(token)+1);            
                    }
                     else{
                    if (op.containsKey(token)) {
                        op.put(token, op.get(token)+1); 
                        
                     
       
                    }else {
                          if (deli.containsKey(token)){
                            deli.put(token, deli.get(token)+1);
                            
                            if("\"".equals(token)){
                                token = st.nextToken();
                                while (st.hasMoreTokens() && !"\"".equals(token)){
                                    text += token;
                                    token = st.nextToken();
                                }
                                texto.add(text);
                                deli.put(token, deli.get(token)+1);
                                text = "";
                            }
                            
                        }else {
                            if (id.containsKey(token)) {
                                id.put(token, id.get(token)+1); 
                            }else {
                                if(token.matches("([0-9]*)|([0-9]*.[0-9]+)")) {
                                    if (num.containsKey(token)) {
                                        num.put(token, num.get(token)+1);
                                    }else num.put(token, 1); 
                                }
                                else id.put(token, 1); 
                            }
                        }
                    }
                 
                }
                }
            }
          }
        }
        
        Iterator<String> itr = r.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(r.get(token) > 0)model.addRow(new Object[]{token, r.get(token),"Reservada"});
        } 
        
        itr = Igualque.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(Igualque.get(token) > 0) model.addRow(new Object[]{token,Igualque.get(token),"SigIgualdad"});
        } 
        
        itr = op.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(op.get(token) > 0){ 
                model.addRow(new Object[]{token, op.get(token),"Operador"});
            }
        } 
        
        itr = simbol.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(simbol.get(token) > 0) model.addRow(new Object[]{token,simbol.get(token),"simbolo"});
        } 
        itr = deli.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(deli.get(token) > 0) model.addRow(new Object[]{token, deli.get(token),"Delimitador"});
        } 
        itr = id.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(id.get(token) > 0) model.addRow(new Object[]{token, id.get(token),"Identificador"});
        } 
        itr = num.keySet().iterator();
        while(itr.hasNext()){
            token = itr.next();
            if(num.get(token) > 0) {
                if(token.matches("[0-9]+")){model.addRow(new Object[]{token, num.get(token),"Número"});}
                else if(token.matches("[0-9]+.[0-9]+")){model.addRow(new Object[]{token, num.get(token),"N.Decimal"});}
            }
        }
        itr = texto.iterator();
        while(itr.hasNext()){
            model.addRow(new Object[]{itr.next(), "1","Cadena"});
            
        }
        
        tabla.setModel(model);
        ////////////////////////////////////////////////////////////////////////////
      
            
    }//GEN-LAST:event_btnTablaActionPerformed

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /********************************************************************************
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnTabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables

    private void JFileChooser() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
